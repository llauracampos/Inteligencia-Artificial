# -*- coding: utf-8 -*-
"""Questão_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oBsUBRveeIo72YLm0jQbc0FlWzWZd6zC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn import preprocessing
from sklearn import utils
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_regression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.linear_model import LinearRegression
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.decomposition import PCA
from sklearn.preprocessing import MinMaxScaler

data = pd.read_csv("drinking_water_potability.csv")
print(data)

#Tratamento de dados
data_zero = data.fillna(0, inplace=False)
print(data_zero)

#Normalização da base de dados
normalized_dataset = MinMaxScaler().fit_transform(data_zero) 
print(normalized_dataset)

#Adição de rotulos

data_rotulos = pd.DataFrame(normalized_dataset, columns=['ph','Hardness','Solids','Chloramines','Sulfate','Conductivity','Organic_carbon','Trihalomethanes','Turbidity','Potability']) 
print(data_rotulos)

#Separação dos atributos

array_x = np.array(data_rotulos.drop('Potability',1))
array_y = np.array(data_rotulos['Potability'])

print(array_x)
print(array_y)

#Execução do PCA para 5
x = array_x
y = array_y

pca = PCA(n_components=5)
pca.fit(x)
print(pca.explained_variance_ratio_)
print(pca.singular_values_)

x_5 = pca.transform(x)
data_labels = pd.DataFrame(x_5, columns=['pc1','pc2','pc3','pc4','pc5'])
data_labels['target'] = y

print(data_labels)

pca_x = np.array(data_labels.drop('target',1))
pca_y = np.array(data_labels['target'])

X = pca_x
y = pca_y

X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.30, random_state=0)

#K-NN

X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.30, random_state=0)

clf = KNeighborsClassifier(n_neighbors = 75, algorithm = "kd_tree", metric='manhattan')
clf.fit(X_train, y_train)

#Acurácia, precisão e F1
y_pred = clf.predict(X_test)
targ = ['class 0', 'class 1']
print(classification_report(y_test, y_pred, target_names=targ))
print("\n")